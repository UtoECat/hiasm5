*Chapter 1: Интерактивное HTML приложение
Make(web)
Add(HtmlEntryPoint,16563582,21,105)
{
 link(onStart,8284333:doPrint,[])
}
Add(HTM_Html,8284333,77,105)
{
 link(onPrint,6847978:doEvent,[])
}
Add(Hub,6847978,133,105)
{
 link(onEvent1,2288322:doPrint,[])
 link(onEvent2,763948:doPrint,[(177,118)(177,167)])
}
Add(HTM_Head,2288322,189,105)
{
 link(onPrint,10304836:doPrint,[])
}
Add(HTM_Body,763948,189,161)
{
 Point(onLoad)
 link(onPrint,13714669:doPrint,[])
 link(onLoad,12621608:doEcho,[(233,174)(233,265)])
}
Add(HTM_Title,10304836,245,105)
{
 link(onPrint,3973328:doPrint,[])
}
Add(VisualText,3973328,301,105)
{
 Lines=#40:Chapter 1: Интерактивное HTML приложение|
 Width=235
 Point(doPrint)
}
Add(VisualText,13714669,245,161)
{
 Lines=#256:Раз мы уже умеем формировать практически любое HTML приложение с формами или без них, то самое время разобраться с тем, как использовать JavaScript для создания более дружественных интерактивных WEB приложений. Попробуем вывести простое текстовое сообщение|
 Width=291
 Height=81
 Point(doPrint)
}
Add(InfoTip,9564197,21,315)
{
 Info=#6:Важно!|
 Font=[MS Sans Serif,12,1,255,1]
 Transparent=1
 Width=365
 Height=109
}
Add(InfoTip,5292217,28,336)
{
 Info=#292:  В этом примере демонстрируется простейший способ совместного использования двух совершенно различных по своей ф-ности и назначению языков. Следует помнить, что не все компоненты одного языка можно соединять с компонентами другого. Подробнее об этом написано в справке по каждому компоненту.|
 Frame=1
 HAlign=0
 Width=351
 Height=81
}
Add(Echo,12621608,245,259)
{
 Message="Привет мир!!!"
}
